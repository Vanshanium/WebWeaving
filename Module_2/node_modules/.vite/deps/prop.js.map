{
  "version": 3,
  "sources": ["../../dotty/lib/index.js", "../../prop/index.js"],
  "sourcesContent": ["//\n// Dotty makes it easy to programmatically access arbitrarily nested objects and\n// their properties.\n//\n\n//\n// `object` is an object, `path` is the path to the property you want to check\n// for existence of.\n//\n// `path` can be provided as either a `\"string.separated.with.dots\"` or as\n// `[\"an\", \"array\"]`.\n//\n// Returns `true` if the path can be completely resolved, `false` otherwise.\n//\n\nvar exists = module.exports.exists = function exists(object, path) {\n  if (typeof path === \"string\") {\n    path = path.split(\".\");\n  }\n\n  if (!(path instanceof Array) || path.length === 0) {\n    return false;\n  }\n\n  path = path.slice();\n\n  var key = path.shift();\n\n  if (typeof object !== \"object\" || object === null) {\n    return false;\n  }\n\n  if (path.length === 0) {\n    return Object.hasOwnProperty.apply(object, [key]);\n  } else {\n    return exists(object[key], path);\n  }\n};\n\n//\n// These arguments are the same as those for `exists`.\n//\n// The return value, however, is the property you're trying to access, or\n// `undefined` if it can't be found. This means you won't be able to tell\n// the difference between an unresolved path and an undefined property, so you \n// should not use `get` to check for the existence of a property. Use `exists`\n// instead.\n//\n\nvar get = module.exports.get = function get(object, path) {\n  if (typeof path === \"string\") {\n    path = path.split(\".\");\n  }\n\n  if (!(path instanceof Array) || path.length === 0) {\n    return;\n  }\n\n  path = path.slice();\n\n  var key = path.shift();\n\n  if (typeof object !== \"object\" || object === null) {\n    return;\n  }\n\n  if (path.length === 0) {\n    return object[key];\n  }\n\n  if (path.length) {\n    return get(object[key], path);\n  }\n};\n\n//\n// Arguments are similar to `exists` and `get`, with the exception that path\n// components are regexes with some special cases. If a path component is `\"*\"`\n// on its own, it'll be converted to `/.*/`.\n//\n// The return value is an array of values where the key path matches the\n// specified criterion. If none match, an empty array will be returned.\n//\n\nvar search = module.exports.search = function search(object, path) {\n  if (typeof path === \"string\") {\n    path = path.split(\".\");\n  }\n\n  if (!(path instanceof Array) || path.length === 0) {\n    return;\n  }\n\n  path = path.slice();\n\n  var key = path.shift();\n\n  if (typeof object !== \"object\" || object === null) {\n    return;\n  }\n\n  if (key === \"*\") {\n    key = \".*\";\n  }\n\n  if (typeof key === \"string\") {\n    key = new RegExp(key);\n  }\n\n  if (path.length === 0) {\n    return Object.keys(object).filter(key.test.bind(key)).map(function(k) { return object[k]; });\n  } else {\n    return Array.prototype.concat.apply([], Object.keys(object).filter(key.test.bind(key)).map(function(k) { return search(object[k], path); }));\n  }\n};\n\n//\n// The first two arguments for `put` are the same as `exists` and `get`.\n//\n// The third argument is a value to `put` at the `path` of the `object`.\n// Objects in the middle will be created if they don't exist, or added to if\n// they do. If a value is encountered in the middle of the path that is *not*\n// an object, it will not be overwritten.\n//\n// The return value is `true` in the case that the value was `put`\n// successfully, or `false` otherwise.\n//\n\nvar put = module.exports.put = function put(object, path, value) {\n  if (typeof path === \"string\") {\n    path = path.split(\".\");\n  }\n\n  if (!(path instanceof Array) || path.length === 0) {\n    return false;\n  }\n  \n  path = path.slice();\n\n  var key = path.shift();\n\n  if (typeof object !== \"object\" || object === null) {\n    return false;\n  }\n\n  if (path.length === 0) {\n    object[key] = value;\n  } else {\n    if (typeof object[key] === \"undefined\") {\n      object[key] = {};\n    }\n\n    if (typeof object[key] !== \"object\" || object[key] === null) {\n      return false;\n    }\n\n    return put(object[key], path, value);\n  }\n};\n", "var dotty = require(\"dotty\").get\n\n// prop\n//\n// functional routine to get a property from an object\n//\n// var obj = {foo: 'bar'}\n// var result = prop('foo')(obj)\n//\nmodule.exports = function(name) {\n  return function(object) {\n    return dotty(object, name)\n  }\n}\n\n"],
  "mappings": "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",
  "names": ["exists", "get", "search", "put"]
}
