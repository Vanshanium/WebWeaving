import {
  __commonJS
} from "./chunk-BUSYA2B4.js";

// node_modules/dotty/lib/index.js
var require_lib = __commonJS({
  "node_modules/dotty/lib/index.js"(exports, module) {
    var exists = module.exports.exists = function exists2(object, path) {
      if (typeof path === "string") {
        path = path.split(".");
      }
      if (!(path instanceof Array) || path.length === 0) {
        return false;
      }
      path = path.slice();
      var key = path.shift();
      if (typeof object !== "object" || object === null) {
        return false;
      }
      if (path.length === 0) {
        return Object.hasOwnProperty.apply(object, [key]);
      } else {
        return exists2(object[key], path);
      }
    };
    var get = module.exports.get = function get2(object, path) {
      if (typeof path === "string") {
        path = path.split(".");
      }
      if (!(path instanceof Array) || path.length === 0) {
        return;
      }
      path = path.slice();
      var key = path.shift();
      if (typeof object !== "object" || object === null) {
        return;
      }
      if (path.length === 0) {
        return object[key];
      }
      if (path.length) {
        return get2(object[key], path);
      }
    };
    var search = module.exports.search = function search2(object, path) {
      if (typeof path === "string") {
        path = path.split(".");
      }
      if (!(path instanceof Array) || path.length === 0) {
        return;
      }
      path = path.slice();
      var key = path.shift();
      if (typeof object !== "object" || object === null) {
        return;
      }
      if (key === "*") {
        key = ".*";
      }
      if (typeof key === "string") {
        key = new RegExp(key);
      }
      if (path.length === 0) {
        return Object.keys(object).filter(key.test.bind(key)).map(function(k) {
          return object[k];
        });
      } else {
        return Array.prototype.concat.apply([], Object.keys(object).filter(key.test.bind(key)).map(function(k) {
          return search2(object[k], path);
        }));
      }
    };
    var put = module.exports.put = function put2(object, path, value) {
      if (typeof path === "string") {
        path = path.split(".");
      }
      if (!(path instanceof Array) || path.length === 0) {
        return false;
      }
      path = path.slice();
      var key = path.shift();
      if (typeof object !== "object" || object === null) {
        return false;
      }
      if (path.length === 0) {
        object[key] = value;
      } else {
        if (typeof object[key] === "undefined") {
          object[key] = {};
        }
        if (typeof object[key] !== "object" || object[key] === null) {
          return false;
        }
        return put2(object[key], path, value);
      }
    };
  }
});

// node_modules/prop/index.js
var require_prop = __commonJS({
  "node_modules/prop/index.js"(exports, module) {
    var dotty = require_lib().get;
    module.exports = function(name) {
      return function(object) {
        return dotty(object, name);
      };
    };
  }
});
export default require_prop();
//# sourceMappingURL=prop.js.map
